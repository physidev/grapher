2025-08-17 04:25:20:579 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Math (RULES (RULE prog (BLOCK (ALT expr EOF))) (RULE expr (BLOCK (ALT (= schild sum)) (ALT (= dchild frac)) (ALT (= pchild prod)) (ALT (= op (BLOCK (ALT OP_ADD) (ALT OP_MIN))) expr) (ALT (= left expr) (= op (BLOCK (ALT OP_ADD) (ALT OP_MIN))) (= right expr)))) (RULE sum (BLOCK (ALT '\\sum_{' (= index VARIABLE) '=' (= initial REAL) '}{' (= final REAL) '}' expr))) (RULE frac (BLOCK (ALT '\\frac{' (= left expr) '}{' (= right expr) '}'))) (RULE prod (BLOCK (ALT atom) (ALT (= left atom) (BLOCK (ALT (= right prod)) (ALT '\\cdot' (= right prod)))))) (RULE atom (BLOCK (ALT (= left atom) (= op OP_POW) (= right atom)) (ALT (= fchild func)) (ALT '(' (= echild expr) ')') (ALT '{' (= echild expr) '}') (ALT (= val (BLOCK (ALT REAL) (ALT CONSTANT) (ALT VARIABLE)))))) (RULE func (BLOCK (ALT '\\' fn_name '(' expr ')'))) (RULE fn_name (BLOCK (ALT (= val FN_SIN)) (ALT (= val FN_COS)) (ALT (= val FN_TAN)) (ALT (= val FN_ARCSIN)) (ALT (= val FN_ARCCOS)) (ALT (= val FN_ARCTAN)) (ALT (= val FN_EXP)) (ALT (= val FN_LOG)))) (RULE OP_ADD (BLOCK (ALT '+'))) (RULE OP_MIN (BLOCK (ALT '-'))) (RULE OP_POW (BLOCK (ALT '^'))) (RULE FN_SIN (BLOCK (ALT 'sin'))) (RULE FN_COS (BLOCK (ALT 'cos'))) (RULE FN_TAN (BLOCK (ALT 'tan'))) (RULE FN_ARCSIN (BLOCK (ALT 'arcsin'))) (RULE FN_ARCCOS (BLOCK (ALT 'arccos'))) (RULE FN_ARCTAN (BLOCK (ALT 'arctan'))) (RULE FN_EXP (BLOCK (ALT 'exp'))) (RULE FN_LOG (BLOCK (ALT 'log'))) (RULE CONSTANT (BLOCK (ALT 'e') (ALT 'i') (ALT '\\pi'))) (RULE VARIABLE (BLOCK (ALT 'j') (ALT 'k') (ALT 'n') (ALT 'm') (ALT 'z') (ALT 'x') (ALT 'y'))) (RULE REAL (BLOCK (ALT (BLOCK (ALT '0') (ALT [1-9] (* (BLOCK (ALT [0-9]))))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [\t\r\n]) (ALT ' ')))) skip)))))
2025-08-17 04:25:20:600 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Math (RULES (RULE prog (BLOCK (ALT expr EOF))) (RULE expr (BLOCK (ALT (= schild sum)) (ALT (= dchild frac)) (ALT (= pchild prod)) (ALT (= op (SET OP_ADD OP_MIN)) expr) (ALT (= left expr) (= op (SET OP_ADD OP_MIN)) (= right expr)))) (RULE sum (BLOCK (ALT '\\sum_{' (= index VARIABLE) '=' (= initial REAL) '}{' (= final REAL) '}' expr))) (RULE frac (BLOCK (ALT '\\frac{' (= left expr) '}{' (= right expr) '}'))) (RULE prod (BLOCK (ALT atom) (ALT (= left atom) (BLOCK (ALT (= right prod)) (ALT '\\cdot' (= right prod)))))) (RULE atom (BLOCK (ALT (= left atom) (= op OP_POW) (= right atom)) (ALT (= fchild func)) (ALT '(' (= echild expr) ')') (ALT '{' (= echild expr) '}') (ALT (= val (SET REAL CONSTANT VARIABLE))))) (RULE func (BLOCK (ALT '\\' fn_name '(' expr ')'))) (RULE fn_name (BLOCK (ALT (= val FN_SIN)) (ALT (= val FN_COS)) (ALT (= val FN_TAN)) (ALT (= val FN_ARCSIN)) (ALT (= val FN_ARCCOS)) (ALT (= val FN_ARCTAN)) (ALT (= val FN_EXP)) (ALT (= val FN_LOG)))) (RULE OP_ADD (BLOCK (ALT '+'))) (RULE OP_MIN (BLOCK (ALT '-'))) (RULE OP_POW (BLOCK (ALT '^'))) (RULE FN_SIN (BLOCK (ALT 'sin'))) (RULE FN_COS (BLOCK (ALT 'cos'))) (RULE FN_TAN (BLOCK (ALT 'tan'))) (RULE FN_ARCSIN (BLOCK (ALT 'arcsin'))) (RULE FN_ARCCOS (BLOCK (ALT 'arccos'))) (RULE FN_ARCTAN (BLOCK (ALT 'arctan'))) (RULE FN_EXP (BLOCK (ALT 'exp'))) (RULE FN_LOG (BLOCK (ALT 'log'))) (RULE CONSTANT (BLOCK (ALT 'e') (ALT 'i') (ALT '\\pi'))) (RULE VARIABLE (BLOCK (ALT (SET 'j' 'k' 'n' 'm' 'z' 'x' 'y')))) (RULE REAL (BLOCK (ALT (BLOCK (ALT '0') (ALT [1-9] (* (BLOCK (ALT [0-9]))))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [\t\r\n]) (ALT ' ')))) skip)))))
2025-08-17 04:25:20:632 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Math (RULES (RULE prog (BLOCK (ALT expr EOF))) (RULE expr (BLOCK (ALT (= schild sum)) (ALT (= dchild frac)) (ALT (= pchild prod)) (ALT (= op (SET OP_ADD OP_MIN)) expr) (ALT (= left expr) (= op (SET OP_ADD OP_MIN)) (= right expr)))) (RULE sum (BLOCK (ALT '\\sum_{' (= index VARIABLE) '=' (= initial REAL) '}{' (= final REAL) '}' expr))) (RULE frac (BLOCK (ALT '\\frac{' (= left expr) '}{' (= right expr) '}'))) (RULE prod (BLOCK (ALT atom) (ALT (= left atom) (BLOCK (ALT (= right prod)) (ALT '\\cdot' (= right prod)))))) (RULE atom (BLOCK (ALT (= left atom) (= op OP_POW) (= right atom)) (ALT (= fchild func)) (ALT '(' (= echild expr) ')') (ALT '{' (= echild expr) '}') (ALT (= val (SET REAL CONSTANT VARIABLE))))) (RULE func (BLOCK (ALT '\\' fn_name '(' expr ')'))) (RULE fn_name (BLOCK (ALT (= val FN_SIN)) (ALT (= val FN_COS)) (ALT (= val FN_TAN)) (ALT (= val FN_ARCSIN)) (ALT (= val FN_ARCCOS)) (ALT (= val FN_ARCTAN)) (ALT (= val FN_EXP)) (ALT (= val FN_LOG))))))
2025-08-17 04:25:20:632 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR MathLexer (RULES (RULE T__0 (BLOCK (ALT '\\sum_{'))) (RULE T__1 (BLOCK (ALT '='))) (RULE T__2 (BLOCK (ALT '}{'))) (RULE T__3 (BLOCK (ALT '}'))) (RULE T__4 (BLOCK (ALT '\\frac{'))) (RULE T__5 (BLOCK (ALT '\\cdot'))) (RULE T__6 (BLOCK (ALT '('))) (RULE T__7 (BLOCK (ALT ')'))) (RULE T__8 (BLOCK (ALT '{'))) (RULE T__9 (BLOCK (ALT '\\'))) (RULE OP_ADD (BLOCK (ALT '+'))) (RULE OP_MIN (BLOCK (ALT '-'))) (RULE OP_POW (BLOCK (ALT '^'))) (RULE FN_SIN (BLOCK (ALT 'sin'))) (RULE FN_COS (BLOCK (ALT 'cos'))) (RULE FN_TAN (BLOCK (ALT 'tan'))) (RULE FN_ARCSIN (BLOCK (ALT 'arcsin'))) (RULE FN_ARCCOS (BLOCK (ALT 'arccos'))) (RULE FN_ARCTAN (BLOCK (ALT 'arctan'))) (RULE FN_EXP (BLOCK (ALT 'exp'))) (RULE FN_LOG (BLOCK (ALT 'log'))) (RULE CONSTANT (BLOCK (ALT 'e') (ALT 'i') (ALT '\\pi'))) (RULE VARIABLE (BLOCK (ALT (SET 'j' 'k' 'n' 'm' 'z' 'x' 'y')))) (RULE REAL (BLOCK (ALT (BLOCK (ALT '0') (ALT [1-9] (* (BLOCK (ALT [0-9]))))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [\t\r\n]) (ALT ' ')))) skip)))))
2025-08-17 04:25:20:899 left-recursion LogManager.java:25 expr
    :   ( {} schild=sum<tokenIndex=18>                                     
        | dchild=frac<tokenIndex=28>                                    
        | pchild=prod<tokenIndex=38>                                    
        | op=(OP_ADD<tokenIndex=49>|OP_MIN<tokenIndex=51>) expr<tokenIndex=54,p=2> 
        )
        (
          {this.precpred(this._ctx, 1)}?<p=1> op=(OP_ADD<tokenIndex=69>|OP_MIN<tokenIndex=71>) right=expr<tokenIndex=76,p=2>
        )*
    ;
2025-08-17 04:25:20:906 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (= schild (sum (ELEMENT_OPTIONS (= tokenIndex 18))))) (ALT (= dchild (frac (ELEMENT_OPTIONS (= tokenIndex 28))))) (ALT (= pchild (prod (ELEMENT_OPTIONS (= tokenIndex 38))))) (ALT (= op (SET (OP_ADD (ELEMENT_OPTIONS (= tokenIndex 49))) (OP_MIN (ELEMENT_OPTIONS (= tokenIndex 51))))) (expr (ELEMENT_OPTIONS (= tokenIndex 54) (= p 2))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 1)}? (ELEMENT_OPTIONS (= p 1))) (= op (SET (OP_ADD (ELEMENT_OPTIONS (= tokenIndex 69))) (OP_MIN (ELEMENT_OPTIONS (= tokenIndex 71))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 76) (= p 2))))))))))
2025-08-17 04:25:20:907 left-recursion LogManager.java:25 atom
    :   ( {} fchild=func<tokenIndex=188>                                    
        | '('<tokenIndex=196> echild=expr<tokenIndex=200> ')'<tokenIndex=202>                            
        | '{'<tokenIndex=210> echild=expr<tokenIndex=214> '}'<tokenIndex=216>                            
        | val=(REAL<tokenIndex=227> | CONSTANT<tokenIndex=231> | VARIABLE<tokenIndex=235>)               
        )
        (
          {this.precpred(this._ctx, 5)}?<p=5> op=OP_POW<tokenIndex=174> right=atom<tokenIndex=178,p=6>
        )*
    ;
2025-08-17 04:25:20:910 grammar LogManager.java:25 added: (RULE atom (BLOCK (ALT (BLOCK (ALT {} (= fchild (func (ELEMENT_OPTIONS (= tokenIndex 188))))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 196))) (= echild (expr (ELEMENT_OPTIONS (= tokenIndex 200)))) (')' (ELEMENT_OPTIONS (= tokenIndex 202)))) (ALT ('{' (ELEMENT_OPTIONS (= tokenIndex 210))) (= echild (expr (ELEMENT_OPTIONS (= tokenIndex 214)))) ('}' (ELEMENT_OPTIONS (= tokenIndex 216)))) (ALT (= val (SET (REAL (ELEMENT_OPTIONS (= tokenIndex 227))) (CONSTANT (ELEMENT_OPTIONS (= tokenIndex 231))) (VARIABLE (ELEMENT_OPTIONS (= tokenIndex 235))))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (OP_POW (ELEMENT_OPTIONS (= tokenIndex 174)))) (= right (atom (ELEMENT_OPTIONS (= tokenIndex 178) (= p 6))))))))))
2025-08-17 04:25:20:911 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, OP_ADD=11, OP_MIN=12, OP_POW=13, FN_SIN=14, FN_COS=15, FN_TAN=16, FN_ARCSIN=17, FN_ARCCOS=18, FN_ARCTAN=19, FN_EXP=20, FN_LOG=21, CONSTANT=22, VARIABLE=23, REAL=24, WS=25}
2025-08-17 04:25:20:912 semantics LogManager.java:25 strings={'\\sum_{'=1, '='=2, '}{'=3, '}'=4, '\\frac{'=5, '\\cdot'=6, '('=7, ')'=8, '{'=9, '\\'=10, '+'=11, '-'=12, '^'=13, 'sin'=14, 'cos'=15, 'tan'=16, 'arcsin'=17, 'arccos'=18, 'arctan'=19, 'exp'=20, 'log'=21}
2025-08-17 04:25:20:920 LL1 LogManager.java:25 
DECISION 0 in rule expr
2025-08-17 04:25:20:924 LL1 LogManager.java:25 look=[1, 5, {7, 9..10, 22..24}, {11..12}]
2025-08-17 04:25:20:925 LL1 LogManager.java:25 LL(1)? true
2025-08-17 04:25:20:925 LL1 LogManager.java:25 
DECISION 1 in rule expr
2025-08-17 04:25:20:925 LL1 LogManager.java:25 look=[null, null]
2025-08-17 04:25:20:925 LL1 LogManager.java:25 LL(1)? false
2025-08-17 04:25:20:925 LL1 LogManager.java:25 
DECISION 2 in rule prod
2025-08-17 04:25:20:925 LL1 LogManager.java:25 look=[{7, 9..10, 22..24}, 6]
2025-08-17 04:25:20:925 LL1 LogManager.java:25 LL(1)? true
2025-08-17 04:25:20:925 LL1 LogManager.java:25 
DECISION 3 in rule prod
2025-08-17 04:25:20:925 LL1 LogManager.java:25 look=[{7, 9..10, 22..24}, {7, 9..10, 22..24}]
2025-08-17 04:25:20:925 LL1 LogManager.java:25 LL(1)? false
2025-08-17 04:25:20:925 LL1 LogManager.java:25 
DECISION 4 in rule atom
2025-08-17 04:25:20:925 LL1 LogManager.java:25 look=[10, 7, 9, {22..24}]
2025-08-17 04:25:20:925 LL1 LogManager.java:25 LL(1)? true
2025-08-17 04:25:20:925 LL1 LogManager.java:25 
DECISION 5 in rule atom
2025-08-17 04:25:20:926 LL1 LogManager.java:25 look=[null, null]
2025-08-17 04:25:20:926 LL1 LogManager.java:25 LL(1)? false
2025-08-17 04:25:20:926 LL1 LogManager.java:25 
DECISION 6 in rule fn_name
2025-08-17 04:25:20:927 LL1 LogManager.java:25 look=[14, 15, 16, 17, 18, 19, 20, 21]
2025-08-17 04:25:20:927 LL1 LogManager.java:25 LL(1)? true
2025-08-17 04:25:20:946 action-translator LogManager.java:25 translate 
2025-08-17 04:25:20:951 action-translator LogManager.java:25 translate this.precpred(this._ctx, 1)
2025-08-17 04:25:20:953 action-translator LogManager.java:25 translate this.precpred(this._ctx, 1)
2025-08-17 04:25:20:957 action-translator LogManager.java:25 translate 
2025-08-17 04:25:20:958 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2025-08-17 04:25:20:959 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
